# azure-pipelines.yml
trigger:
  branches:
    include:
    - main
    - feature/*
  paths:
    include:
    - terraform/*

variables:
  - group: terraform-secrets

stages:
- stage: Validate
  jobs:
  - job: terraform_validate
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    # --- REPLACE TerraformInstaller@0 with manual download/install ---
    - bash: |
        TF_VERSION="1.5.7"
        TF_INSTALL_DIR="/usr/local/bin" # A common location for executables on Linux

        echo "Downloading Terraform v${TF_VERSION}..."
        wget "https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip" -O terraform.zip

        echo "Unzipping Terraform..."
        unzip terraform.zip -d .

        echo "Moving Terraform to ${TF_INSTALL_DIR}..."
        sudo mv terraform ${TF_INSTALL_DIR}/
        sudo chmod +x ${TF_INSTALL_DIR}/terraform

        echo "Verifying Terraform installation and version:"
        terraform --version
      displayName: 'Manual Install Terraform'
      # Set continueOnError to true only for debugging. Remove once successful.
      # continueOnError: true

    # --- Now use the installed Terraform ---
    - task: TerraformTaskV4@4
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/dev'
        backendServiceArm: 'TerraformServiceConnection'
        backendAzureRmResourceGroupName: 'AZ-104'
        backendAzureRmStorageAccountName: 'glowsatf'
        backendAzureRmContainerName: 'sacont'
        backendAzureRmKey: 'dev.terraform.tfstate'
      displayName: 'Terraform Init (Dev)' # Added display name for clarity

    - task: TerraformTaskV4@4
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/dev'
      displayName: 'Terraform Validate (Dev)' # Added display name for clarity

# ... (Apply similar manual installation to Dev_Deploy and Test_Deploy stages)